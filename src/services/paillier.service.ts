import { PrivateKey, PublicKey, generateRandomKeys } from 'paillier-bigint';
import { Paillier } from '../interfaces';

export const getPublicKey = (n: bigint, g: bigint) => new PublicKey(n, g);
export const getPrivateKey = (lambda: bigint, mu: bigint, publicKey: PublicKey) => new PrivateKey(lambda, mu, publicKey);

const generatePaillierKeys = async (): Promise<Paillier.Keys> => {
    const keys = (await generateRandomKeys()) as unknown as Paillier.Keys;
    return { publicKey: keys.publicKey, privateKey: keys.privateKey } as Paillier.Keys
}

/* global BigInt */
function paillerEncrypt(plaintext: bigint, publicKeyComponents: PublicKey): bigint {
    const n = BigInt(publicKeyComponents.n), g = BigInt(publicKeyComponents.g)
    console.log(`n:`, n)
    console.log(`g:`, g)
    const publicKey = getPublicKey(n, g);
    return publicKey.encrypt(plaintext);
}

async function paillerDecrypt(ciphertext: bigint, publicKeyComponents: Paillier.PublicKey, privateKeyComponents: Paillier.PrivateKey) {
    const n = BigInt(publicKeyComponents.n)
    const g = BigInt(publicKeyComponents.g)
    const lambda = BigInt(privateKeyComponents.lambda)
    const mu = BigInt(privateKeyComponents.mu)
    ciphertext = BigInt(ciphertext)
    const publicKey = new PublicKey(n, g);
    const privateKey = getPrivateKey(lambda, mu, publicKey)
    return new Promise((resolve, reject) => {
        const dec = privateKey.decrypt(ciphertext);
        setTimeout(() => {
            resolve(dec);
        }, 1000);
    })
}

function paillerAddition(ciphertext1: bigint, ciphertext2: bigint, publicKey: PublicKey) {
    return publicKey.addition(ciphertext1, ciphertext2)
}

const test2 = async () => {
    const publicKeyComponents = {
        g: ``,
        n: ``
    }

    const privateKeyComponents = {
        lambda: ``,
        mu: ``
    }

    const cipher = ``
    const decrypted = await paillerDecrypt(BigInt(cipher), publicKeyComponents, privateKeyComponents);
    console.log({ decrypted });
}

// test2();

// const test = async () => {
//     const { publicKey, privateKey } = (await getElection(`0c5eea33d52d422b82c2c91f21e78505`)).publicKey;
//     console.log(`pkpk`, publicKey)
//     console.log(`sksk`, privateKey)
//     // const publicKeyComponents = {
//     //     n: ``,
//     //     g: ``
//     // }
//     // const privateKeyComponents = {
//     //     lambda: ``,
//     //     mu: ``
//     // }
//     const ciphertext = paillerEncrypt(1, publicKey);
//     console.log(`ciphertext:`, ciphertext)
//     const ciphertext2 = paillerEncrypt(1, publicKey);
//     console.log(`ciphertext2:`, ciphertext2)
//     // const { publicKey, privateKey } = await generateRandomKeys(3072)
//     // console.log(`n:`, publicKey.n.toString())
//     // console.log(`g:`, publicKey.g.toString())
//     // console.log(`lambda:`, privateKey.lambda.toString())
//     // console.log(`mu:`, privateKey.mu.toString())
// }



// test();

export { paillerEncrypt, paillerDecrypt, paillerAddition, generatePaillierKeys }